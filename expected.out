# Cloning tree
Branch master set up to track remote branch master from origin.
# Doing subtree add
git fetch @PGXNREPO@ @PGXNBRANCH@
# Making checkout dirty
# Verify setup.sh errors out
diff --git a/garbage b/garbage
new file mode 100644
index 0000000..e69de29
# Running setup.sh
Copying pgxntool/_.gitignore to .gitignore and adding to git
Copying pgxntool/META.in.json to META.in.json and adding to git
Creating Makefile
make: `META.json' is up to date.
Copying ../pgxntool/test/deps.sql to deps.sql and adding to git
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   ../.gitignore
	new file:   ../META.in.json
	new file:   ../META.json
	new file:   ../Makefile
	new file:   deps.sql
	new file:   pgxntool

If you won't be creating C code then you can:

rmdir src

If everything looks good then

git commit -am 'Add pgxntool (https://github.com/decibel/pgxntool/tree/release)'
######################################
# Status
######################################
META.in.json
META.json
Makefile
meta.mk
pgxntool
pgxntool-test.control
sql
src
t
test
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   .gitignore
	new file:   META.in.json
	new file:   META.json
	new file:   Makefile
	new file:   test/deps.sql
	new file:   test/pgxntool

# Initial make produces error for now
@GIT COMMIT@ Commit ugly hack so make dist works
 1 file changed, 27 insertions(+)
 create mode 100644 .gitignore
make: `META.json' is up to date.
# git commit
@GIT COMMIT@ Test setup
 5 files changed, 233 insertions(+)
 create mode 100644 META.in.json
 create mode 100644 META.json
 create mode 100644 Makefile
 create mode 100644 test/deps.sql
 create mode 120000 test/pgxntool
# Test creating a release
git branch 0.1.0
git push --set-upstream origin 0.1.0
Branch 0.1.0 set up to track remote branch 0.1.0 from origin.
git archive --prefix=distribution_test-0.1.0/ -o ../distribution_test-0.1.0.zip 0.1.0
distribution_test-0.1.0/t/TEST_DOC.asc
# Making sure ONLY TEST_DOC.asc is in the distribution
distribution_test-0.1.0/t/TEST_DOC.asc
# Run setup.sh again to verify it doesn't over-write things
.gitignore already exists
META.in.json already exists
Makefile already exists
make: `META.json' is up to date.
deps.sql already exists
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
nothing to commit, working tree clean
If you won't be creating C code then you can:

rmdir src

If everything looks good then

git commit -am 'Add pgxntool (https://github.com/decibel/pgxntool/tree/release)'
# Try pulling in pgtap
make: Nothing to be done for `pgtap'.
# Copy stuff from template to where it normally lives
# Plain make
make: `META.json' is up to date.
# First make test should fail due to not installing
rm -rf ../distribution_test-0.1.0.zip sql/pgxntool-test--0.1.0.sql
rm -rf results/ regression.diffs regression.out tmp_check/ log/
cp sql/pgxntool-test.sql sql/pgxntool-test--0.1.0.sql
/bin/sh @PG_LOCATION@/lib/pgxs/src/makefiles/../../config/install-sh -c -d '@PG_LOCATION@/share/extension'
/usr/bin/install -c -m 644 ./sql/pgxntool-test--0.1.0.sql ./sql/pgxntool-test--0.1.0--0.1.1.sql ./pgxntool-test.control  '@PG_LOCATION@/share/extension/'
INVOCATION OF pg_regress
(using postmaster on Unix socket, default port)
============== dropping database "contrib_regression" ==============
DROP DATABASE
============== creating database "contrib_regression" ==============
CREATE DATABASE
ALTER DATABASE
============== installing plpgsql                     ==============
CREATE LANGUAGE
============== running regression test queries        ==============
test pgxntool-test            ... FAILED (test process exited with exit code 3)

======================
 1 of 1 tests failed. 
======================

The differences that caused some tests to fail can be viewed in the
file "@TEST_DIR@/test/regression.diffs".  A copy of the test summary that you see
above is saved in the file "@TEST_DIR@/test/regression.out".

*** @TEST_DIR@/test/expected/pgxntool-test.out
--- @TEST_DIR@/test/results/pgxntool-test.out
***************
*** 0 ****
--- 1,60 ----
+ \i @TEST_DIR@/test/pgxntool/setup.sql
+ \i test/pgxntool/psql.sql
+ -- No status messages
+ \set QUIET true
+ -- Verbose error messages
+ \set VERBOSITY verbose
+ -- Revert all changes on failure.
+ \set ON_ERROR_ROLLBACK 1
+ \set ON_ERROR_STOP true
+ BEGIN;
+ \i test/pgxntool/tap_setup.sql
+ \i test/pgxntool/psql.sql
+ -- No status messages
+ \set QUIET true
+ -- Verbose error messages
+ \set VERBOSITY verbose
+ -- Revert all changes on failure.
+ \set ON_ERROR_ROLLBACK 1
+ \set ON_ERROR_STOP true
+ SET client_min_messages = WARNING;
+ DO $$
+ BEGIN
+ IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname='tap') THEN
+   CREATE SCHEMA tap;
+ END IF;
+ END$$;
+ SET search_path = tap, public;
+ CREATE EXTENSION IF NOT EXISTS pgtap SCHEMA tap;
+ SET client_min_messages = NOTICE;
+ \pset format unaligned
+ \pset tuples_only true
+ \pset pager
+ -- vi: expandtab ts=2 sw=2
+ \i test/deps.sql
+ -- IF NOT EXISTS will emit NOTICEs, which is annoying
+ SET client_min_messages = WARNING;
+ -- Add any test dependency statements here
+ -- Note: pgTap is loaded by setup.sql
+ --CREATE EXTENSION IF NOT EXISTS ...;
+ /*
+  * Now load our extension. We don't use IF NOT EXISTs here because we want an
+  * error if the extension is already loaded (because we want to ensure we're
+  * getting the very latest version).
+  */
+ CREATE EXTENSION ...;
+ psql:test/deps.sql:12: ERROR:  42601: syntax error at or near ".."
+ LINE 6: CREATE EXTENSION ...;
+                          ^
+ LOCATION:  scanner_yyerror, scan.l:####
+ SELECT plan(1);
+ 1..1
+ SELECT is(
+   "pgxntool-test"(1,2)
+   , 3
+ );
+ ERROR:  42883: function pgxntool-test(integer, integer) does not exist
+ LINE 2:   "pgxntool-test"(1,2)
+           ^
+ HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ LOCATION:  ParseFuncOrColumn, parse_func.c:####

======================================================================

######################################
# ^^^ Should FAIL! ^^^
######################################
# Add extension to deps.sql
# Make certain test/output gets created
rm -rf  sql/pgxntool-test--0.1.0.sql
rm -rf results/ regression.diffs regression.out tmp_check/ log/
cp sql/pgxntool-test.sql sql/pgxntool-test--0.1.0.sql
/bin/sh @PG_LOCATION@/lib/pgxs/src/makefiles/../../config/install-sh -c -d '@PG_LOCATION@/share/extension'
/usr/bin/install -c -m 644 ./sql/pgxntool-test--0.1.0.sql ./sql/pgxntool-test--0.1.0--0.1.1.sql ./pgxntool-test.control  '@PG_LOCATION@/share/extension/'
INVOCATION OF pg_regress
(using postmaster on Unix socket, default port)
============== dropping database "contrib_regression" ==============
DROP DATABASE
============== creating database "contrib_regression" ==============
CREATE DATABASE
ALTER DATABASE
============== installing plpgsql                     ==============
CREATE LANGUAGE
============== running regression test queries        ==============
test pgxntool-test            ... FAILED

======================
 1 of 1 tests failed. 
======================

The differences that caused some tests to fail can be viewed in the
file "@TEST_DIR@/test/regression.diffs".  A copy of the test summary that you see
above is saved in the file "@TEST_DIR@/test/regression.out".

*** @TEST_DIR@/test/expected/pgxntool-test.out
--- @TEST_DIR@/test/results/pgxntool-test.out
***************
*** 0 ****
--- 1,59 ----
+ \i @TEST_DIR@/test/pgxntool/setup.sql
+ \i test/pgxntool/psql.sql
+ -- No status messages
+ \set QUIET true
+ -- Verbose error messages
+ \set VERBOSITY verbose
+ -- Revert all changes on failure.
+ \set ON_ERROR_ROLLBACK 1
+ \set ON_ERROR_STOP true
+ BEGIN;
+ \i test/pgxntool/tap_setup.sql
+ \i test/pgxntool/psql.sql
+ -- No status messages
+ \set QUIET true
+ -- Verbose error messages
+ \set VERBOSITY verbose
+ -- Revert all changes on failure.
+ \set ON_ERROR_ROLLBACK 1
+ \set ON_ERROR_STOP true
+ SET client_min_messages = WARNING;
+ DO $$
+ BEGIN
+ IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname='tap') THEN
+   CREATE SCHEMA tap;
+ END IF;
+ END$$;
+ SET search_path = tap, public;
+ CREATE EXTENSION IF NOT EXISTS pgtap SCHEMA tap;
+ SET client_min_messages = NOTICE;
+ \pset format unaligned
+ \pset tuples_only true
+ \pset pager
+ -- vi: expandtab ts=2 sw=2
+ \i test/deps.sql
+ -- IF NOT EXISTS will emit NOTICEs, which is annoying
+ SET client_min_messages = WARNING;
+ -- Add any test dependency statements here
+ -- Note: pgTap is loaded by setup.sql
+ --CREATE EXTENSION IF NOT EXISTS ...;
+ /*
+  * Now load our extension. We don't use IF NOT EXISTs here because we want an
+  * error if the extension is already loaded (because we want to ensure we're
+  * getting the very latest version).
+  */
+ CREATE EXTENSION "pgxntool-test";
+ -- Re-enable notices
+ SET client_min_messages = NOTICE;
+ SELECT plan(1);
+ 1..1
+ SELECT is(
+   "pgxntool-test"(1,2)
+   , 3
+ );
+ ok 1
+ \i @TEST_DIR@/test/pgxntool/finish.sql
+ SELECT finish();
+ \echo # TRANSACTION INTENTIONALLY LEFT OPEN!
+ # TRANSACTION INTENTIONALLY LEFT OPEN!
+ -- vi: expandtab ts=2 sw=2

======================================================================

# And copy expected output file to output dir that should now exist
# Run make test again
rm -rf  sql/pgxntool-test--0.1.0.sql
rm -rf results/ regression.diffs regression.out tmp_check/ log/
cp sql/pgxntool-test.sql sql/pgxntool-test--0.1.0.sql
/bin/sh @PG_LOCATION@/lib/pgxs/src/makefiles/../../config/install-sh -c -d '@PG_LOCATION@/share/extension'
/usr/bin/install -c -m 644 ./sql/pgxntool-test--0.1.0.sql ./sql/pgxntool-test--0.1.0--0.1.1.sql ./pgxntool-test.control  '@PG_LOCATION@/share/extension/'
INVOCATION OF pg_regress
(using postmaster on Unix socket, default port)
============== dropping database "contrib_regression" ==============
DROP DATABASE
============== creating database "contrib_regression" ==============
CREATE DATABASE
ALTER DATABASE
============== installing plpgsql                     ==============
CREATE LANGUAGE
============== running regression test queries        ==============
test pgxntool-test            ... ok

=====================
 All 1 tests passed. 
=====================

######################################
# ^^^ Should be clean output ^^^
######################################
# Remove input and output directories, make sure output is not recreated
rm -rf  sql/pgxntool-test--0.1.0.sql
rm -rf results/ regression.diffs regression.out tmp_check/ log/
cp sql/pgxntool-test.sql sql/pgxntool-test--0.1.0.sql
/bin/sh @PG_LOCATION@/lib/pgxs/src/makefiles/../../config/install-sh -c -d '@PG_LOCATION@/share/extension'
/usr/bin/install -c -m 644 ./sql/pgxntool-test--0.1.0.sql ./sql/pgxntool-test--0.1.0--0.1.1.sql ./pgxntool-test.control  '@PG_LOCATION@/share/extension/'
INVOCATION OF pg_regress
(using postmaster on Unix socket, default port)
============== dropping database "contrib_regression" ==============
DROP DATABASE
============== creating database "contrib_regression" ==============
CREATE DATABASE
ALTER DATABASE
============== installing plpgsql                     ==============
CREATE LANGUAGE
============== running regression test queries        ==============
test pgxntool-test            ... ok

=====================
 All 1 tests passed. 
=====================

# Test make results
rm -rf  sql/pgxntool-test--0.1.0.sql
rm -rf results/ regression.diffs regression.out tmp_check/ log/
cp sql/pgxntool-test.sql sql/pgxntool-test--0.1.0.sql
/bin/sh @PG_LOCATION@/lib/pgxs/src/makefiles/../../config/install-sh -c -d '@PG_LOCATION@/share/extension'
/usr/bin/install -c -m 644 ./sql/pgxntool-test--0.1.0.sql ./sql/pgxntool-test--0.1.0--0.1.1.sql ./pgxntool-test.control  '@PG_LOCATION@/share/extension/'
INVOCATION OF pg_regress
(using postmaster on Unix socket, default port)
============== dropping database "contrib_regression" ==============
DROP DATABASE
============== creating database "contrib_regression" ==============
CREATE DATABASE
ALTER DATABASE
============== installing plpgsql                     ==============
CREATE LANGUAGE
============== running regression test queries        ==============
test pgxntool-test            ... FAILED

======================
 1 of 1 tests failed. 
======================

The differences that caused some tests to fail can be viewed in the
file "@TEST_DIR@/test/regression.diffs".  A copy of the test summary that you see
above is saved in the file "@TEST_DIR@/test/regression.out".

*** @TEST_DIR@/test/expected/pgxntool-test.out
--- @TEST_DIR@/test/results/pgxntool-test.out
***************
*** 57,60 ****
  \echo # TRANSACTION INTENTIONALLY LEFT OPEN!
  # TRANSACTION INTENTIONALLY LEFT OPEN!
  -- vi: expandtab ts=2 sw=2
- 
--- 57,59 ----

======================================================================

######################################
# ^^^ Should have a diff ^^^
######################################
rm -rf  sql/pgxntool-test--0.1.0.sql
rm -rf results/ regression.diffs regression.out tmp_check/ log/
cp sql/pgxntool-test.sql sql/pgxntool-test--0.1.0.sql
/bin/sh @PG_LOCATION@/lib/pgxs/src/makefiles/../../config/install-sh -c -d '@PG_LOCATION@/share/extension'
/usr/bin/install -c -m 644 ./sql/pgxntool-test--0.1.0.sql ./sql/pgxntool-test--0.1.0--0.1.1.sql ./pgxntool-test.control  '@PG_LOCATION@/share/extension/'
INVOCATION OF pg_regress
(using postmaster on Unix socket, default port)
============== dropping database "contrib_regression" ==============
DROP DATABASE
============== creating database "contrib_regression" ==============
CREATE DATABASE
ALTER DATABASE
============== installing plpgsql                     ==============
CREATE LANGUAGE
============== running regression test queries        ==============
test pgxntool-test            ... FAILED

======================
 1 of 1 tests failed. 
======================

The differences that caused some tests to fail can be viewed in the
file "@TEST_DIR@/test/regression.diffs".  A copy of the test summary that you see
above is saved in the file "@TEST_DIR@/test/regression.out".

*** @TEST_DIR@/test/expected/pgxntool-test.out
--- @TEST_DIR@/test/results/pgxntool-test.out
***************
*** 57,60 ****
  \echo # TRANSACTION INTENTIONALLY LEFT OPEN!
  # TRANSACTION INTENTIONALLY LEFT OPEN!
  -- vi: expandtab ts=2 sw=2
- 
--- 57,59 ----

======================================================================

rsync -rlpgovP test/results/ test/expected
sending incremental file list
pgxntool-test.out
RSYNC OUTPUT

sent 1,851 bytes  received 35 bytes  3,772.00 bytes/sec
total size is 1,728  speedup is 0.92
rm -rf  sql/pgxntool-test--0.1.0.sql
rm -rf results/ regression.diffs regression.out tmp_check/ log/
cp sql/pgxntool-test.sql sql/pgxntool-test--0.1.0.sql
/bin/sh @PG_LOCATION@/lib/pgxs/src/makefiles/../../config/install-sh -c -d '@PG_LOCATION@/share/extension'
/usr/bin/install -c -m 644 ./sql/pgxntool-test--0.1.0.sql ./sql/pgxntool-test--0.1.0--0.1.1.sql ./pgxntool-test.control  '@PG_LOCATION@/share/extension/'
INVOCATION OF pg_regress
(using postmaster on Unix socket, default port)
============== dropping database "contrib_regression" ==============
DROP DATABASE
============== creating database "contrib_regression" ==============
CREATE DATABASE
ALTER DATABASE
============== installing plpgsql                     ==============
CREATE LANGUAGE
============== running regression test queries        ==============
test pgxntool-test            ... ok

=====================
 All 1 tests passed. 
=====================

######################################
# ^^^ Should be clean output, BUT NOTE THERE WILL BE A FAILURE DIRECTLY ABOVE! ^^^
######################################
